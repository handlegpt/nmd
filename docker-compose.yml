version: '3.8'

services:
  # Next.js Application
  nomad-now:
    build: 
      context: .
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    ports:
      - "3011:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs:/app/logs
    networks:
      - nomad-network

  # Strapi CMS - Using correct Supabase direct connection
  strapi:
    image: strapi/strapi:latest
    container_name: nomad-strapi
    ports:
      - "8055:1337"
    environment:
      # Database configuration - Using correct Supabase direct connection
      DATABASE_CLIENT: "postgres"
      DATABASE_HOST: "db.xdpjstyoeqgvaacduzdw.supabase.co"
      DATABASE_PORT: "5432"
      DATABASE_NAME: "postgres"
      DATABASE_USERNAME: "postgres"
      DATABASE_PASSWORD: "${DB_PASSWORD}"
      DATABASE_SSL: "true"
      # App configuration
      APP_KEYS: "${KEY}"
      API_TOKEN_SALT: "${SECRET}"
      ADMIN_JWT_SECRET: "${SECRET}"
      TRANSFER_TOKEN_SALT: "${SECRET}"
      JWT_SECRET: "${SECRET}"
      # Admin configuration
      ADMIN_EMAIL: "${ADMIN_EMAIL:-admin@nomad.now}"
      ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
      # Server configuration
      HOST: "0.0.0.0"
      PORT: "1337"
      NODE_ENV: "production"
      # SSL configuration for Supabase
      NODE_TLS_REJECT_UNAUTHORIZED: "0"
    volumes:
      - strapi_uploads:/opt/app/public/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337/admin"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - nomad-network

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: nomad-redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nomad-network

networks:
  nomad-network:
    driver: bridge

volumes:
  strapi_uploads:
  redis_data: 